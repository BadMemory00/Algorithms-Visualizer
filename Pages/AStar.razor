@page "/AStar"

<h3>Useful tips on how to start : <button @onclick="GenerateTips" class="btn btn-outline-secondary ml-5">@TipsButtonValue</button> </h3>
@if (UnderStood)
{
    <div>
        <ul>
            <li><p>the grid has maximum width and height of 55 squares and minimum of 1 any more or less the Generate Grid button will be disabled</p></li>
            <li><p>press and hold the Alt key to make/remove the <span style="color:green">wall</span></p></li>
            <li><p>press and hold the Ctrl key to make/remove the <span style="color:red">start point</span></p></li>
            <li><p>press and hold the Shift key to make/remove the <span style="color:blue">end point</span></p></li>
            <li><p>Normal left-mouse clicks generates more walls if the sqare is empty, if not they will make the square blank</p></li>

        </ul>
    </div>
}
<div class="row">
    <div class="col-3">
        <label for="formGroupExampleInput">Enter Rows Numbers : </label>
        <input @bind="@RowsNumbers" @onclick="HideGrid" type="number" class="form-control" id="formGroupExampleInput" placeholder="Enter Rows Numbers" max="55" min="1" />
    </div>
    <div class="col-3">
        <label for="formGroupExampleInput2">Enter Columns Numbers :</label>
        <input @bind="@ColumnsNumbers" @oninput="@((e) => { ColumnsNumbers = (int)e.Value; })" @onclick="HideGrid" type="number" class="form-control" id="formGroupExampleInput2" placeholder="Enter Columns Numbers" max="55" min="1" />
    </div>
</div>
<div class="mb-3">
    @{
        if (RowsNumbers > 0 && ColumnsNumbers > 0 && RowsNumbers < 56 && ColumnsNumbers < 56)
        {
            <button class="btn btn-primary mt-4" @onclick="GenerateGrid">@GridButton</button>
        }
        else
        {
            <button disabled class="btn btn-primary mt-4" @onclick="GenerateGrid">@GridButton</button>
        }
    }
</div>

@if (IsGrid == true)
{
    @for (int i = 0; i < RowsNumbers; i++)
    {
        var rows = i;
        <div class="container-fluid">

            <div class="" style="border:1px solid grey; height:23px; display:table-cell;">
                @for (int j = 0; j < ColumnsNumbers; j++)
                {
                    var columns = j;
                    <div @onmouseover="e => ChangeColorOnMouseOver(e, rows, columns)" @onclick="e => StartAndEndPoints(e, rows, columns)" style="border:1px solid grey; height:23px; min-width:30px; display:table-cell; @ColoredDiv[rows, columns]"></div>
                }
            </div>
        </div>
    }
    <br />
    <p>Squares Count = @{int SqaresNumbers = RowsNumbers * ColumnsNumbers;}@SqaresNumbers </p>
}


@code {

    private int RowsNumbers = 15;
    private int ColumnsNumbers = 15;
    string[,] ColoredDiv = new string[55, 55];

    #region Show/Hide Grid
    private bool IsGrid = false;
    private void GenerateGrid()
    {
        IsGrid = !IsGrid;
    }
    private void HideGrid()
    {
        IsGrid = false;
    }
    #endregion

    #region Generate Grid Button
    private string GridButton => IsGrid ? "Hide Grid" : "Generate Grid";
    #endregion

    #region Grid Wall
    private void ChangeColorOnMouseOver(MouseEventArgs e, int i, int j)
    {
        if (e.AltKey)
        {
            if (ColoredDiv[i, j] == "background-color:green")
            {
                ColoredDiv[i, j] = null;
            }
            else
            {
                ColoredDiv[i, j] = "background-color:green";
            }
        }
    }
    #endregion

    #region Start and End points, walls with normal left-mouse clicks
    private int StartPositionCounter = 0;
    private int EndPositionCounter = 0;
    private void StartAndEndPoints(MouseEventArgs e, int i, int j)
    {
        if (e.CtrlKey && StartPositionCounter == 0)
        {
            if (ColoredDiv[i, j] == "background-color:blue")
            {
                EndPositionCounter--;
            }
            ColoredDiv[i, j] = "background-color:red";
            StartPositionCounter++;
        }
        else if (e.ShiftKey && EndPositionCounter == 0)
        {
            if (ColoredDiv[i, j] == "background-color:red")
            {
                StartPositionCounter--;
            }
            ColoredDiv[i, j] = "background-color:blue";
            EndPositionCounter++;
        }
        else if (ColoredDiv[i, j] == null)
        {
            ColoredDiv[i, j] = "background-color:green";
        }
        else if (ColoredDiv[i, j] == "background-color:red" || ColoredDiv[i, j] == "background-color:green" || ColoredDiv[i, j] == "background-color:blue")
        {
            if (ColoredDiv[i, j] == "background-color:red")
            {
                StartPositionCounter--;
            }
            else if (ColoredDiv[i, j] == "background-color:blue")
            {
                EndPositionCounter--;
            }
            ColoredDiv[i, j] = null;
        }

    }
    #endregion

    #region Show or Hide Tips
    private bool UnderStood = true;
    private string TipsButtonValue => UnderStood ? "UnderStood" : "Show tips";
    private void GenerateTips()
    {
        UnderStood = !UnderStood;
    }
    #endregion


}
